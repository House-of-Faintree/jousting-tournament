
/*
Authored by ZIJI
Dated 20/10/2015
********************************************************************************
still working on this handshake function using tmr0 overflow interrupt
based on the serial function
*/



#include  <p18f4520.h>
#include  <usart.h>

#include  "ConfigRegs18f4520.h"

#define INIT_IPR1   0B00000000
#define BUFFSIZE    50

void setupSerial(void);
int  sendByte(char *byte);
void sendNewLine(void);
void sendString(char *byte);
void sendNum(int result);

char ByteTest = 0x78;
int  NumTest = 5326;
char StrTest[] = "week12!";

char GLOBAL_RXBUFFER[BUFFSIZE] = "0";
char *rxptr = GLOBAL_RXBUFFER;
void rx232Isr();
void TMR0Isr ();
#pragma code lowpriority = 0x18
void low_priority_interrupt(){

    if(PIR1bits.RCIF == 1)
    {
        _asm goto rx232Isr 
        _endasm
    }
    else if (INTCONbits.TMR0IF == 1)
    {
        _asm goto TMR0Isr
        _endasm
    }
}

#pragma code

/*This function sends individual bytes and as such needs to have a iterative
loop such as a while implemented in the calling function. With a minor modification,
namely of a while inside this function, it can be transformed to sendString rather
than sendByte. However, implementing while loops inside nested functions
seemed like it might give us some problems to debug.
Takes in a dereferenced pointer to an address, and returns one of a set of debug integers

Usage:
if someString = 'command to send to the robot'

while(sendByte(&someString)){
  do other things between sending chars;
}
*/
int sendByte(char *byte){ 
    if(*byte != 0x00){

    while(TXSTAbits.TRMT == 0);
    TXREG = *byte;
    return 1;
    }
    return 0;    //we are finished, null terminator found
}

void sendNum(int result){
    while(TXSTAbits.TRMT == 0);
    TXREG = result;
    return;
}

void sendNewLine(void){
    while(TXSTAbits.TRMT == 0);
    TXREG = 0x0a; //Line feed
    
    while(TXSTAbits.TRMT == 0);
    TXREG = 0x0d; //carriage return'
    
}

void sendString(char *byte){
    
    while(sendByte(byte)){
        byte++;
    }
    sendNewLine();
    return;
    
}

/*This function sets up the serial port of the PIC for operation.
Since it changes internal register values there are no arguments or
return values associated with it.
Baud rate set to 9600 but this is arbitrary. Lower baud is possibly better for multitasking,
but higher baud makes for smaller data packets. Needs to be experimented with.
*/

void TMR0Init(void)
{
    T0CONbits.TMR0ON = 1;
    T0CONbits.T08BIT = 1;
    T0CONbits.PSA = 1;
    INTCON2bits.TMR0IP = 0;
    INTCONbits.TMR0IE = 1;
    INTCONbits.TMR0IF = 0;
}

void setupSerial(void){
  INTCONbits.GIE = 1;
  INTCONbits.PEIE = 1;
  IPR1 = INIT_IPR1;
  RCONbits.IPEN = 1;
  TRISCbits.RC6 = 0;              //set rc6 as output
  TRISCbits.RC7 = 1;              //set rc7 as input
  TXSTAbits.SYNC = 0;             //Set to asynchronous mode
  TXSTAbits.BRGH = 1;             //Set baudrate generator to high
  TXSTAbits.TXEN = 1;
  //BAUDCONbits.BRG16 = 0;
  SPBRG = 25;                     //Set baudrate to 9600 for 10Mhz
  RCSTAbits.SPEN = 1;             //enable serial port
  RCSTAbits.CREN = 1;             //Enables receiver in continuous mode
  PIE1bits.RCIE = 1;
  //TXSTA = 0x24;                 //All settings up TXSTA done
  INTCONbits.GIE = 1;
  INTCONbits.PEIE = 1;
}

void main(void)
{
    TMR0Init();
    setupSerial();
    while(1)
    {
    }
}

//rx interrupt
#pragma interrupt rx232Isr
void rx232Isr (){
    *rxptr = RCREG ;
    rxptr++;
    if (rxptr == &GLOBAL_RXBUFFER[BUFFSIZE])
    {
        rxptr = &GLOBAL_RXBUFFER[0];
    }
}

#pragma interrupt TMR0Isr
void TMR0Isr (){
    INTCONbits.TMR0IE = 0;
    sendNum(NumTest);
    sendString(StrTest);
    INTCONbits.TMR0IF = 0;
    INTCONbits.TMR0IE = 1;
}
